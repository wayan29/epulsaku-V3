
'use server';
/**
 * @fileOverview A Genkit flow for purchasing a product from TokoVoucher.
 * - purchaseTokoVoucherProduct
 * - PurchaseTokoVoucherProductInput
 * - PurchaseTokoVoucherProductOutput
 */

import { ai } from '@/ai/genkit';
import { z } from 'genkit';
import { getAdminSettingsFromDB } from '@/lib/admin-settings-utils';

const PurchaseTokoVoucherProductInputSchema = z.object({
  refId: z.string().describe('A unique reference ID for this transaction generated by the client application.'),
  productCode: z.string().describe('The "code" of the product from TokoVoucher.'),
  customerNo: z.string().describe('The customer number (e.g., phone number, game ID).'),
  serverId: z.string().optional().describe('The server ID, if required by the product (e.g., for some games).'),
});
export type PurchaseTokoVoucherProductInput = z.infer<typeof PurchaseTokoVoucherProductInputSchema>;

const PurchaseTokoVoucherProductOutputSchema = z.object({
  isSuccess: z.boolean().describe('Whether the transaction request was broadly accepted by the API.'),
  status: z.enum(["sukses", "pending", "gagal", "error"]).optional().describe('The transaction status from TokoVoucher.'),
  trxId: z.string().optional().describe('The transaction ID from TokoVoucher if successful or pending.'),
  sn: z.string().optional().describe('Serial number if successful, or error message if status is "gagal".'),
  message: z.string().optional().describe('Overall message, often contains error_msg if present.'),
  rawResponse: z.any().optional().describe('The raw response data from TokoVoucher for debugging.'),
});
export type PurchaseTokoVoucherProductOutput = z.infer<typeof PurchaseTokoVoucherProductOutputSchema>;

export async function purchaseTokoVoucherProduct(input: PurchaseTokoVoucherProductInput): Promise<PurchaseTokoVoucherProductOutput> {
  return purchaseTokoVoucherProductFlow(input);
}

const purchaseTokoVoucherProductFlow = ai.defineFlow(
  {
    name: 'purchaseTokoVoucherProductFlow',
    inputSchema: PurchaseTokoVoucherProductInputSchema,
    outputSchema: PurchaseTokoVoucherProductOutputSchema,
  },
  async (input) => {
    const adminSettings = await getAdminSettingsFromDB();
    const memberCode = adminSettings.tokovoucherMemberCode;
    const secretKey = adminSettings.tokovoucherKey; // This is the 'secret'

    if (!memberCode || !secretKey) {
      return {
        isSuccess: false,
        status: "error",
        message: 'Error: TokoVoucher Member Code or Key (Secret) is not configured in Admin Settings.',
      };
    }

    let apiUrl = `https://api.tokovoucher.net/v1/transaksi?ref_id=${input.refId}&produk=${input.productCode}&tujuan=${input.customerNo}&secret=${secretKey}&member_code=${memberCode}`;
    if (input.serverId) {
      apiUrl += `&server_id=${input.serverId}`;
    }

    try {
      const response = await fetch(apiUrl);
      const responseData = await response.json();

      if (responseData.status && (responseData.status === 'sukses' || responseData.status === 'pending')) {
        return {
          isSuccess: true,
          status: responseData.status,
          trxId: responseData.trx_id,
          sn: responseData.sn || responseData.token || undefined, // TokoVoucher might use 'token' for SN
          message: responseData.message || 'Transaction submitted.',
          rawResponse: responseData,
        };
      } else if (responseData.status && responseData.status === 'gagal') {
         return {
          isSuccess: false, // API call was okay, but transaction failed logically
          status: 'gagal',
          trxId: responseData.trx_id,
          sn: responseData.sn, // This field contains the error message on 'gagal'
          message: responseData.sn || 'Transaction failed at TokoVoucher.',
          rawResponse: responseData,
        };
      }
      else {
        // Handles cases like status 0 or other unexpected structures
        return {
          isSuccess: false,
          status: "error",
          message: `TokoVoucher API Error: ${responseData.error_msg || responseData.message || 'Unknown error or unexpected response structure.'}`,
          rawResponse: responseData,
        };
      }
    } catch (error) {
      console.error('Error during TokoVoucher transaction request:', error);
      let errorMessage = 'An unknown error occurred during the TokoVoucher transaction request.';
      if (error instanceof Error) {
        errorMessage = error.message;
      }
      return {
        isSuccess: false,
        status: "error",
        message: `Client-side error: ${errorMessage}`,
      };
    }
  }
);
